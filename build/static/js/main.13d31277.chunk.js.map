{"version":3,"sources":["components/Searchbar.js","components/ImageGalleryItem.js","components/ImageGallery.js","components/Modal.js","App.js","index.js"],"names":["Searchbar","event","preventDefault","this","props","queue","target","value","className","onSubmit","readInput","bind","type","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","state","webformatURL","map","ImageURL","src","alt","largeImageURL","onClick","toggle","id","ImageGallery","page","KEY","loading","prevProps","prevState","setState","api","length","window","scrollTo","top","document","documentElement","scrollHeight","behavior","fetch","then","res","json","hits","finally","error","console","log","color","height","width","timeout","StrictMode","getLargeImd","handleOnClick","modalRoot","querySelector","Modal","toggleModal","e","code","toggleModalOverlay","currentTarget","addEventListener","removeEventListener","createPortal","largeImg","App","showModal","handleQueue","q","undefined","toggleLoad","loader","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.13d31277.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Searchbar extends Component {\r\n\r\n    readInput(event) {\r\n        \r\n        \r\n        event.preventDefault();\r\n        this.props.queue(event.target[1].value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <header className=\"Searchbar\">\r\n                <form className=\"SearchForm\" onSubmit={this.readInput.bind(this)}>\r\n                    <button type=\"submit\" className=\"SearchForm-button\">\r\n                        <span className=\"SearchForm-button-label\">Search</span>\r\n                    </button>\r\n                    <input\r\n                        className=\"SearchForm-input\"\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        placeholder=\"Поиск изображений и фотографий\"\r\n                    />\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Searchbar;","import { Component } from 'react';\r\n\r\nclass ImageGalleryItem extends Component {\r\n\r\n    state = {\r\n\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            this.props.webformatURL.map(ImageURL => \r\n                <li className=\"ImageGalleryItem\" key={ImageURL.id}>\r\n                    <img src={ImageURL.webformatURL} alt={ImageURL.largeImageURL} className=\"ImageGalleryItem-image\" onClick={this.props.toggle}/>\r\n                </li>\r\n            ))\r\n    }\r\n}\r\n\r\nexport default ImageGalleryItem;\r\n\r\n\r\n","import ImageGalleryItem from './ImageGalleryItem';\r\nimport React, { Component } from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nclass ImageGallery extends Component {\r\n\r\n    state = {\r\n        page: 1,\r\n        KEY: '23099415-b292849e49f5632c41c65f5ef',\r\n        webformatURL: [],\r\n        loading: false,\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        \r\n        if (prevProps.queue !== this.props.queue) {\r\n\r\n            // this.setState(() => ({\r\n            // loading: true,\r\n            // }))\r\n\r\n            this.setState({ page: 1, webformatURL: [], loading: true, })\r\n            this.api(this.props.queue);\r\n            this.setState(prevState => ({ page: prevState.page + 1, queue: this.props.queue }));\r\n            \r\n        }\r\n\r\n        if (this.state.webformatURL.length > 12) {\r\n            window.scrollTo({\r\n                top: document.documentElement.scrollHeight,\r\n                behavior: 'smooth',\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnClick() {\r\n\r\n        this.setState(prevState => ({\r\n            page: prevState.page + 1,\r\n        }));\r\n\r\n        this.api();\r\n\r\n    }\r\n\r\n    api(queue = this.props.queue) {\r\n\r\n        const { page, KEY } = this.state\r\n\r\n        // this.setState({loading: true })\r\n        // this.state.loading = true;\r\n        // console.log(this.state.loading);\r\n            \r\n        try {\r\n            fetch(`https://pixabay.com/api/?q=${queue}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`)\r\n                .then(res => res.json())\r\n                .then(webformatURL => {\r\n                    this.setState(prevState => ({ webformatURL: [...prevState.webformatURL, ...webformatURL.hits] }))\r\n                })\r\n                .finally(() => {\r\n                    this.setState({ loading: false })\r\n                }\r\n            )\r\n        }\r\n\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n\r\n    }\r\n  \r\n  \r\n    render() {\r\n        \r\n        if (this.state.loading) {\r\n                \r\n            return (\r\n                <Loader\r\n                    type=\"Puff\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    timeout={3000} //3 secs\r\n                    className=\"loader\"\r\n                />\r\n            );\r\n        }\r\n\r\n\r\n        if (!this.state.loading) {\r\n            return (<React.StrictMode>\r\n                <ul className=\"ImageGallery\">\r\n                    {this.state.webformatURL.length !== 0\r\n                        ? <>\r\n                            <ImageGalleryItem webformatURL={this.state.webformatURL} toggle={this.props.toggle} getLargeImd={this.props.getLargeImd} />\r\n                        </>\r\n                        : <div>\r\n                            <p>К сожалению, тут пока что ничего нет...</p>\r\n                        </div>\r\n                    }\r\n                </ul>\r\n\r\n               { this.state.loading && <Loader\r\n                                type=\"Puff\"\r\n                                color=\"#00BFFF\"\r\n                                height={100}\r\n                                width={100}\r\n                                timeout={3000} //3 secs\r\n                                className=\"loader\"\r\n                            />}\r\n     \r\n                {\r\n                    this.state.webformatURL.length !== 0 &&\r\n                    <button type='button' className=\"Button\" onClick={this.handleOnClick.bind(this)}>Загрузить больше...</button>\r\n                }\r\n            </React.StrictMode>\r\n            )\r\n        }\r\n    }\r\n    }\r\n\r\n\r\nexport default ImageGallery;","import React, { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst modalRoot = document.querySelector('#modal__root');\r\n\r\nexport default class Modal extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.toggleModal)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.toggleModal)\r\n    }\r\n\r\n    toggleModal = e => {\r\n        \r\n        if (e.code === 'Escape') {\r\n            this.props.toggle();\r\n        }    \r\n    }\r\n\r\n    toggleModalOverlay = e => {\r\n        if (e.target === e.currentTarget) {\r\n            this.props.toggle();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return createPortal(\r\n            <div className=\"Overlay\" onClick={this.toggleModalOverlay}>\r\n            <div className=\"Modal\">\r\n                    <img src={this.props.largeImg} alt=\"\" />\r\n            </div>\r\n        </div>\r\n        , modalRoot)\r\n    }\r\n\r\n\r\n}","import Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport { Component } from 'react';\nimport Modal from './components/Modal';\n\n\n\nclass App extends Component {\n\n  state = {\n    queue: '',\n    showModal: false,\n    largeImg: '',\n  }\n\n\n  handleQueue = (q = '') => {\n    this.setState({queue: q});\n  }\n\n  toggleModal = (e) => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }))\n\n    if (this.state.showModal === false && e !== undefined) {\n      this.setState({largeImg: e.target.alt,}) \n    }\n  }\n\n  toggleLoad = () => {\n    this.setState(() => ({\n      loader: false,\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.showModal && <Modal toggle={this.toggleModal} largeImg={this.state.largeImg} />}\n        <Searchbar queue={this.handleQueue} />\n        <ImageGallery queue={this.state.queue} toggle={this.toggleModal} />\n          \n    </div>\n  );\n}\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}